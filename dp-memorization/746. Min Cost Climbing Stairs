Method 1: Rolling array for space optimization O(1), Time complexity O(n)
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        # dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])
        n = len(cost)
        prev, curr = 0, 0
        for i in range(2, n+1):
            nxt = min(curr+cost[i-1], prev+cost[i-2])
            prev, curr = curr, nxt
        
        return curr

Method 2: space complexity O(n) Time complexity O(n)
class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        # dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])
        n = len(cost)
        dp = [0] * (n+1)
        for i in range(2,n+1):
            dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])

        return dp[n]
