# Method 1
# Recursing using memo; 
# Use Python Decorator -The @cache is a decorator in Python that automatically memoizes the results of function calls 
class Solution:
    def climbStairs(self, n: int) -> int:
        
        @cache
        def dfs(i):
            if i <= 1:
                return 1 # dfs(2) = 1 + 1 = dfs(0) + dfs(1)
            return dfs(i-1) + dfs(i-2)

        return dfs(n)


    # Time complexity: O(n)
    # Space complexity: O(n)

# Method 2: explicit memo
class Solution:
    def climbStairs(self, n: int) -> int:
        memo = {}

        def dfs(i):
            if i == 1 or i ==0:
                return 1
            if i in memo:
                return memo[i]
            memo[i] = dfs(i-1) + dfs(i-2)
            return memo[i]

        return dfs(n)

# Method 2: bottom up with space complexity
# Bottom up approach
# Space optimization: The space-optimized solution further reduces the space complexity by using only two variables (prev and curr) instead of an entire DP table. 

class Solution:
    def climbStairs(self, n: int) -> int:
        
        f0, f1 = 1, 1
        for _ in range(2, n+1):
            new_f = f1 + f0
            f0 = f1
            f1 = new_f
        return f1

        # Time complexity: O(n)
        # Space complexity: O(1)
        



