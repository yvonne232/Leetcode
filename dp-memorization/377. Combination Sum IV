# Method 1: dp 
# Time complexity O(n*target) Space complexity: O(target)

class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target+1)
        dp[0] = 1 #One way to get sum 0 (empty combination)

        for i in range(1, target+1):
            for num in nums:
                if i - num >= 0:
                    dp[i] += dp[i-num]

        return dp[target]

# Method 2: recursion with memo

class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        # Top down approach: dfs + cache
        memo = {}

        def dfs(remaining):
            if remaining == 0:
                return 1 # 1 valid solution
            elif remaining < 0:
                return 0 # no valid solution
            if remaining in memo:
                return memo[remaining]

            total = 0
            for num in nums:
                total += dfs(remaining-num)
            memo[remaining] = total
            return total

        return dfs(target)



Example Walkthrough
Input: nums = [1,2,3], target = 4

dp = [1,0,0,0,0] (initially)

For i = 1:
dp[1] = dp[0] (for 1) = 1

For i = 2:
dp[2] = dp[1] (for 1) + dp[0] (for 2) = 1 + 1 = 2

For i = 3:
dp[3] = dp[2] + dp[1] + dp[0] = 2 + 1 + 1 = 4

For i = 4:
dp[4] = dp[3] + dp[2] + dp[1] = 4 + 2 + 1 = 7

